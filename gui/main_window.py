def create_test_data(self):
    """Tworzy syntetyczne dane testowe"""
    try:
        print("Tworzenie danych testowych...")

        # U≈ºyj data_processor do utworzenia danych
        self.df, self.processed_df = self.data_processor.create_synthetic_data()

        # POPRAWKA: Upewnij siƒô ≈ºe kolumny kategoryczne istniejƒÖ
        if self.processed_df is not None:
            # Sprawd≈∫ i utw√≥rz brakujƒÖce kolumny kategoryczne
            demographic_cols_to_categorize = []

            for col in DEMOGRAPHIC_COLS:
                if col in self.processed_df.columns:
                    cat_col = f"{col}_Category"
                    if cat_col not in self.processed_df.columns:
                        demographic_cols_to_categorize.append(col)

            # Utw√≥rz kategorie demograficzne je≈õli ich brak
            if demographic_cols_to_categorize:
                print(f"Tworzenie kategorii dla: {demographic_cols_to_categorize}")

                for col in demographic_cols_to_categorize:
                    if col == 'Age':
                        # Kategorie wieku
                        self.processed_df[f'{col}_Category'] = pd.cut(
                            self.processed_df[col],
                            bins=[0, 25, 35, 45, 55, 100],
                            labels=['18-25', '26-35', '36-45', '46-55', '55+']
                        )
                    elif col == 'Gender':
                        # Kategorie p≈Çci
                        self.processed_df[f'{col}_Category'] = self.processed_df[col].map({
                            0.48: 'Female',
                            -0.48: 'Male'
                        }).fillna('Other')
                    elif col == 'Education':
                        # Kategorie wykszta≈Çcenia
                        self.processed_df[f'{col}_Category'] = pd.cut(
                            self.processed_df[col],
                            bins=[-3, -1, 0, 1, 3],
                            labels=['Primary', 'Secondary', 'University', 'Masters+']
                        )
                    elif col == 'Country':
                        # Kategorie kraj√≥w
                        self.processed_df[f'{col}_Category'] = pd.cut(
                            self.processed_df[col],
                            bins=[-3, -1, 0, 1, 3],
                            labels=['USA', 'UK', 'Canada', 'Australia', 'Other']
                        )
                    elif col == 'Ethnicity':
                        # Kategorie etniczne
                        self.processed_df[f'{col}_Category'] = pd.cut(
                            self.processed_df[col],
                            bins=[-3, -1, 0, 1, 3],
                            labels=['White', 'Black', 'Asian', 'Mixed', 'Other']
                        )

            print(f"‚úÖ Dane testowe utworzone: {len(self.processed_df)} wierszy, {len(self.processed_df.columns)} kolumn")

            # Od≈õwie≈º interfejs
            self.refresh_table()
            self.update_substance_combos()
            self.data_info_label.config(text="‚úÖ Dane testowe wczytane", foreground="green")

            messagebox.showinfo("Sukces", f"‚úÖ Utworzono dane testowe:\n‚Ä¢ {len(self.processed_df)} os√≥b\n‚Ä¢ {len(self.processed_df.columns)} zmiennych\n‚Ä¢ Wszystkie kategorie demograficzne")
        else:
            messagebox.showerror("B≈ÇƒÖd", "Nie mo≈ºna utworzyƒá danych testowych!")

    except Exception as e:
        messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna utworzyƒá danych testowych: {str(e)}")
        print(f"B≈ÇƒÖd w create_test_data: {str(e)}")# -*- coding: utf-8 -*-
"""
G≈Ç√≥wne okno aplikacji UCI Drug Consumption Analyzer
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import sys
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Dodaj ≈õcie≈ºki do modu≈Ç√≥w
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.data_processor import DataProcessor
from core.analyzer import StatisticalAnalyzer
from models.clustering import ClusterAnalyzer
from models.classification import ClassificationManager
from visualization.plots import PlotManager
from utils.constants import *
from utils.helpers import validate_dataframe

class DrugConsumptionAnalyzer:
    """G≈Ç√≥wna klasa aplikacji"""

    def __init__(self, root):
        self.root = root
        self.setup_window()

        # Komponenty
        self.data_processor = DataProcessor()
        self.analyzer = StatisticalAnalyzer()
        self.cluster_analyzer = ClusterAnalyzer()
        self.classification_manager = ClassificationManager()
        self.plot_manager = PlotManager()

        # Dane
        self.df = None
        self.processed_df = None

        # Zmienne UI
        self.filter_var = tk.StringVar()
        self.substance_var = tk.StringVar()
        self.classification_substance_var = tk.StringVar()

        # Komponenty UI
        self.data_info_label = None
        self.result_frame = None
        self.result_text = None
        self.plot_frame = None
        self.notebook = None
        self.data_table = None
        self.table_scrollbar_v = None
        self.table_scrollbar_h = None
        self.table_info_label = None

        self.setup_ui()

    def setup_window(self):
        """Konfiguruje g≈Ç√≥wne okno"""
        self.root.title(GUI_CONFIG['title'])
        self.root.geometry(GUI_CONFIG['geometry'])
        self.root.configure(bg=GUI_CONFIG['bg_color'])

        # Stylowanie
        style = ttk.Style()
        style.theme_use('clam')

        # Niestandardowe style
        style.configure('Title.TLabel', font=('Segoe UI', 16, 'bold'),
                        foreground=COLORS['primary'])
        style.configure('Header.TLabel', font=('Segoe UI', 12, 'bold'),
                        foreground=COLORS['dark'])
        style.configure('Success.TButton', foreground='white',
                        background=COLORS['success'])
        style.configure('Danger.TButton', foreground='white',
                        background=COLORS['danger'])
        style.configure('TCombobox', padding=5)
        style.configure('TLabelFrame', font=('Segoe UI', 10, 'bold'))

    def setup_ui(self):
        """Konfiguruje interfejs u≈ºytkownika"""
        # G≈Ç√≥wna ramka
        main_frame = ttk.Frame(self.root, padding="15")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)

        # Lewy panel kontrolny (przewijalny)
        self.setup_control_panel(main_frame)

        # Prawy panel wynik√≥w
        self.setup_result_panel(main_frame)

    def setup_control_panel(self, parent):
        """Konfiguruje panel kontrolny"""
        # Kontener z scrollbarem
        control_container = ttk.LabelFrame(parent, text="üéõÔ∏è Panel Kontrolny", padding="0")
        control_container.grid(row=1, column=0, sticky=(tk.N, tk.S, tk.W), padx=(0, 15))

        # Canvas i scrollbar
        canvas = tk.Canvas(control_container, borderwidth=0, highlightthickness=0)
        scrollbar = ttk.Scrollbar(control_container, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.grid(row=0, column=0, sticky=(tk.N, tk.S, tk.W, tk.E))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))

        control_container.columnconfigure(0, weight=1)
        control_container.rowconfigure(0, weight=1)

        # Sekcje panelu
        self.create_control_sections(scrollable_frame)

    def create_control_sections(self, parent):
        """Tworzy sekcje panelu kontrolnego"""
        row = 0

        # 1. Wczytywanie danych
        row = self.create_data_section(parent, row)

        # 2. Statystyki opisowe
        row = self.create_stats_section(parent, row)

        # 3. Analiza korelacji
        row = self.create_correlation_section(parent, row)

        # 4. Filtrowanie danych
        row = self.create_filter_section(parent, row)

        # 5. Przetwarzanie danych
        row = self.create_processing_section(parent, row)

        # 6. Wizualizacje
        row = self.create_visualization_section(parent, row)

        # 7. Modelowanie zaawansowane
        row = self.create_modeling_section(parent, row)

        # 8. Analizy specyficzne UCI
        row = self.create_uci_section(parent, row)

    def create_data_section(self, parent, row):
        """Tworzy sekcjƒô wczytywania danych"""
        data_frame = ttk.LabelFrame(parent, text="üìÅ 1. Wczytywanie Danych", padding="10")
        data_frame.grid(row=row, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))

        ttk.Button(data_frame, text="üìÇ Wczytaj dane UCI (.data/.csv)",
                   command=self.load_data).grid(row=0, column=0, columnspan=2,
                                                sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(data_frame, text="üß™ Utw√≥rz dane testowe",
                   command=self.create_test_data).grid(row=1, column=0, columnspan=2,
                                                       sticky=(tk.W, tk.E), pady=(0, 5))

        # Przyciski pomocy i resetowania
        help_frame = ttk.Frame(data_frame)
        help_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(5, 0))

        ttk.Button(help_frame, text="üìö Pomoc",
                   command=self.show_help).grid(row=0, column=0, padx=(0, 5), sticky=tk.W)
        ttk.Button(help_frame, text="‚ÑπÔ∏è O aplikacji",
                   command=self.show_about).grid(row=0, column=1, padx=(0, 5), sticky=tk.W)
        ttk.Button(help_frame, text="üîÑ Reset",
                   command=self.reset_analysis).grid(row=0, column=2, padx=(0, 5), sticky=tk.W)
        ttk.Button(help_frame, text="üîç Debug",
                   command=self.debug_demographic_data).grid(row=0, column=3, sticky=tk.W)

        self.data_info_label = ttk.Label(data_frame, text="‚ùå Brak danych", foreground="red")
        self.data_info_label.grid(row=3, column=0, columnspan=2, sticky=tk.W, pady=(5, 0))

        return row + 1

    def create_stats_section(self, parent, row):
        """Tworzy sekcjƒô statystyk"""
        stats_frame = ttk.LabelFrame(parent, text="üìà 2. Statystyki Opisowe", padding="10")
        stats_frame.grid(row=row, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))

        ttk.Button(stats_frame, text="üìä Oblicz statystyki podstawowe",
                   command=self.calculate_basic_stats).grid(row=0, column=0, columnspan=2,
                                                            sticky=(tk.W, tk.E), pady=(0, 5))

        return row + 1

    def create_correlation_section(self, parent, row):
        """Tworzy sekcjƒô analizy korelacji"""
        corr_frame = ttk.LabelFrame(parent, text="üîó 3. Analiza Korelacji", padding="10")
        corr_frame.grid(row=row, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))

        ttk.Button(corr_frame, text="üß† Korelacje cech osobowo≈õci",
                   command=self.analyze_personality_correlations).grid(row=0, column=0, columnspan=2,
                                                                       sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(corr_frame, text="üíä Korelacje substancji",
                   command=self.analyze_substance_correlations).grid(row=1, column=0, columnspan=2,
                                                                     sticky=(tk.W, tk.E), pady=(0, 5))

        return row + 1

    def create_filter_section(self, parent, row):
        """Tworzy sekcjƒô filtrowania"""
        filter_frame = ttk.LabelFrame(parent, text="üéØ 4. Filtrowanie Danych", padding="10")
        filter_frame.grid(row=row, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))

        filter_combo = ttk.Combobox(filter_frame, textvariable=self.filter_var, width=25)
        filter_combo['values'] = FILTER_OPTIONS
        filter_combo.set('Wszystkie dane')
        filter_combo.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(filter_frame, text="‚úÖ Zastosuj filtr",
                   command=self.apply_filter).grid(row=1, column=0, columnspan=2,
                                                   sticky=(tk.W, tk.E), pady=(0, 5))

        return row + 1

    def create_processing_section(self, parent, row):
        """Tworzy sekcjƒô przetwarzania danych"""
        process_frame = ttk.LabelFrame(parent, text="‚öôÔ∏è 5. Przetwarzanie Danych", padding="10")
        process_frame.grid(row=row, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))

        ttk.Button(process_frame, text="üìè Standaryzacja cech",
                   command=self.standardize_features).grid(row=0, column=0, columnspan=2,
                                                           sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(process_frame, text="üîß Obs≈Çuga brakujƒÖcych warto≈õci",
                   command=self.handle_missing_values).grid(row=1, column=0, columnspan=2,
                                                            sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(process_frame, text="üîÄ Kodowanie binarne",
                   command=self.binary_encode).grid(row=2, column=0, columnspan=2,
                                                    sticky=(tk.W, tk.E), pady=(0, 5))

        return row + 1

    def create_visualization_section(self, parent, row):
        """Tworzy sekcjƒô wizualizacji"""
        viz_frame = ttk.LabelFrame(parent, text="üìà 6. Wizualizacje", padding="10")
        viz_frame.grid(row=row, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))

        ttk.Button(viz_frame, text="üìä Rozk≈Çady cech osobowo≈õci",
                   command=self.plot_personality_distributions).grid(row=0, column=0, columnspan=2,
                                                                     sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(viz_frame, text="üìà Czƒôsto≈õƒá u≈ºywania substancji",
                   command=self.plot_substance_usage).grid(row=1, column=0, columnspan=2,
                                                           sticky=(tk.W, tk.E), pady=(0, 5))

        # Wyb√≥r substancji
        ttk.Label(viz_frame, text="Wybierz substancjƒô:").grid(row=2, column=0, sticky=tk.W)

        substance_combo = ttk.Combobox(viz_frame, textvariable=self.substance_var, width=25)
        substance_combo['values'] = SUBSTANCE_COLS
        substance_combo.set('Cannabis')
        substance_combo.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(viz_frame, text="üì¶ Analiza demograficzna - Boxploty",
                   command=self.plot_demographic_boxplots).grid(row=4, column=0, columnspan=2,
                                                                sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(viz_frame, text="üìä Analiza demograficzna - Histogramy",
                   command=self.plot_demographic_histograms).grid(row=5, column=0, columnspan=2,
                                                                  sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(viz_frame, text="üå°Ô∏è Por√≥wnanie wszystkich substancji",
                   command=self.plot_all_substances_comparison).grid(row=6, column=0, columnspan=2,
                                                                     sticky=(tk.W, tk.E), pady=(0, 5))

        return row + 1

    def create_modeling_section(self, parent, row):
        """Tworzy sekcjƒô modelowania"""
        model_frame = ttk.LabelFrame(parent, text="ü§ñ 7. Modelowanie Zaawansowane", padding="10")
        model_frame.grid(row=row, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))

        ttk.Button(model_frame, text="üéØ Klastrowanie K-means + Profile",
                   command=self.perform_enhanced_clustering).grid(row=0, column=0, columnspan=2,
                                                                  sticky=(tk.W, tk.E), pady=(0, 5))

        # Wyb√≥r substancji do klasyfikacji
        ttk.Label(model_frame, text="Substancja do przewidywania:").grid(row=1, column=0, sticky=tk.W)

        classification_combo = ttk.Combobox(model_frame, textvariable=self.classification_substance_var, width=25)
        classification_combo['values'] = SUBSTANCE_COLS
        classification_combo.set('Cannabis')
        classification_combo.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(model_frame, text="üå≤ Klasyfikacja Random Forest",
                   command=self.perform_classification).grid(row=3, column=0, columnspan=2,
                                                             sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(model_frame, text="üèÜ Por√≥wnaj wszystkie substancje",
                   command=self.compare_all_classifications).grid(row=4, column=0, columnspan=2,
                                                                  sticky=(tk.W, tk.E), pady=(0, 5))

        return row + 1

    def create_uci_section(self, parent, row):
        """Tworzy sekcjƒô analiz specyficznych UCI"""
        uci_frame = ttk.LabelFrame(parent, text="üéì 8. Analizy Specyficzne UCI", padding="10")
        uci_frame.grid(row=row, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))

        ttk.Button(uci_frame, text="üß¨ Profile Klastr√≥w vs Substancje",
                   command=self.analyze_cluster_substance_patterns).grid(row=0, column=0, columnspan=2,
                                                                         sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(uci_frame, text="üë• Demografia Klastr√≥w",
                   command=self.analyze_cluster_demographics).grid(row=1, column=0, columnspan=2,
                                                                   sticky=(tk.W, tk.E), pady=(0, 5))

        ttk.Button(uci_frame, text="üö® Risk Assessment Tool",
                   command=self.create_risk_assessment).grid(row=2, column=0, columnspan=2,
                                                             sticky=(tk.W, tk.E), pady=(0, 5))

        return row + 1

    def setup_result_panel(self, parent):
        """Konfiguruje panel wynik√≥w"""
        self.result_frame = ttk.LabelFrame(parent, text="üìä Wyniki Analizy", padding="15")
        self.result_frame.grid(row=1, column=1, sticky=(tk.N, tk.S, tk.E, tk.W))

        self.result_frame.columnconfigure(0, weight=1)
        self.result_frame.rowconfigure(0, weight=1)

        # Notebook z zak≈Çadkami
        self.notebook = ttk.Notebook(self.result_frame)
        self.notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Zak≈Çadka tabeli edytowalnej
        self.table_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.table_frame, text="üìã Tabela Danych")
        self.setup_data_table()

        # Zak≈Çadka tekstowa
        self.text_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.text_frame, text="üìù Wyniki Tekstowe")

        self.result_text = scrolledtext.ScrolledText(self.text_frame, wrap=tk.WORD,
                                                     width=90, height=35, font=('Consolas', 10))
        self.result_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        self.text_frame.columnconfigure(0, weight=1)
        self.text_frame.rowconfigure(0, weight=1)

        # Zak≈Çadka wykres√≥w
        self.plot_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.plot_frame, text="üìä Wykresy Interaktywne")

        self.plot_frame.columnconfigure(0, weight=1)
        self.plot_frame.rowconfigure(0, weight=1)

    # === METODY OBS≈ÅUGI ZDARZE≈É ===

    def load_data(self):
        """Wczytuje dane z pliku"""
        file_path = filedialog.askopenfilename(
            title="Wybierz plik z danymi UCI",
            filetypes=[("Data files", "*.data"), ("CSV files", "*.csv"), ("All files", "*.*")]
        )

        if file_path:
            success, message, df = self.data_processor.load_data(file_path)

            if success:
                self.df = df
                self.processed_df = df.copy()

                # Zaktualizuj UI
                self.data_info_label.config(text=message, foreground="green")

                # Poka≈º informacje o danych
                self.display_data_info()

                # Zaktualizuj combobox substancji
                self.update_substance_combos()

                # Od≈õwie≈º tabelƒô
                self.refresh_table()

                messagebox.showinfo("Sukces", "‚úÖ Dane UCI zosta≈Çy pomy≈õlnie wczytane!")
            else:
                messagebox.showerror("B≈ÇƒÖd", f"‚ùå {message}")

    def display_data_info(self):
        """Wy≈õwietla informacje o wczytanych danych"""
        if self.df is None:
            return

        summary = self.data_processor.get_data_summary(self.df)

        info_text = f"""
üéì === DATASET UCI DRUG CONSUMPTION (QUANTIFIED) ===

üìä ROZMIAR DANYCH: {summary['shape'][0]} respondent√≥w √ó {summary['shape'][1]} zmiennych

üßë‚Äçü§ù‚Äçüßë CHARAKTERYSTYKA PR√ìBY:
"""

        # Demografia
        for demo_type, demo_data in summary['demographics'].items():
            if demo_data:
                info_text += f"\n{demo_type}:\n"
                for category, count in list(demo_data.items())[:5]:
                    pct = count / summary['shape'][0] * 100
                    info_text += f"  {category}: {count} ({pct:.1f}%)\n"

        # Top substancje
        if summary['substances']:
            substance_list = [(name, data['usage_rate']) for name, data in summary['substances'].items()]
            substance_list.sort(key=lambda x: x[1], reverse=True)

            info_text += f"\nüíä TOP 10 U≈ªYWANYCH SUBSTANCJI:\n"
            for i, (substance, rate) in enumerate(substance_list[:10], 1):
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i:>2}."
                users = int(rate * summary['shape'][0])
                info_text += f"{emoji} {substance:<15} {users:>4} os√≥b ({rate*100:>5.1f}%)\n"

        info_text += f"""

üéØ KLUCZOWE CHARAKTERYSTYKI:
‚Ä¢ Pr√≥ba: G≈Ç√≥wnie m≈Çodzi doro≈õli (18-34), wykszta≈Çceni, kraje anglojƒôzyczne
‚Ä¢ Substancje: Od powszechnych (caffeine 95%+) do rzadkich (heroin <5%)  
‚Ä¢ Osobowo≈õƒá: Znormalizowane score'y (Œº‚âà0, œÉ‚âà1) z modelu Big Five + impulsywno≈õƒá
‚Ä¢ Format: Self-report online survey, anonimowe odpowiedzi
‚Ä¢ Jako≈õƒá: Zawiera fikcyjnƒÖ substancjƒô "Semer" do kontroli wiarygodno≈õci

‚ö†Ô∏è OGRANICZENIA PR√ìBY:
‚Ä¢ Geographic bias: G≈Ç√≥wnie kraje anglojƒôzyczne (UK, US, Canada)
‚Ä¢ Demographic bias: M≈Çodzi, wykszta≈Çceni, z dostƒôpem do internetu  
‚Ä¢ Temporal: Dane z ~2012, wzorce mog≈Çy siƒô zmieniƒá
‚Ä¢ Self-report: Mo≈ºliwe under-reporting illegal substance use
"""

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, info_text)

    def update_substance_combos(self):
        """Aktualizuje combobox-y substancji"""
        if self.df is None:
            return

        existing_substances = [col for col in SUBSTANCE_COLS if col in self.df.columns]

        # Znajd≈∫ widget-y combobox
        for widget in self.root.winfo_children():
            self._update_combo_recursive(widget, existing_substances)

    def _update_combo_recursive(self, widget, substances):
        """Rekurencyjnie aktualizuje combobox-y"""
        if isinstance(widget, ttk.Combobox):
            current_values = widget['values']
            if current_values and current_values[0] in SUBSTANCE_COLS:
                widget['values'] = substances
                if widget.get() not in substances and substances:
                    widget.set(substances[0])

        for child in widget.winfo_children():
            self._update_combo_recursive(child, substances)

    def calculate_basic_stats(self):
        """Oblicza podstawowe statystyki"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        stats_text = self.analyzer.calculate_basic_stats(self.processed_df)
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, stats_text)

    def analyze_personality_correlations(self):
        """Analizuje korelacje cech osobowo≈õci"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        correlation_matrix, analysis_text = self.analyzer.analyze_correlations(
            self.processed_df, PERSONALITY_COLS, "personality"
        )

        if correlation_matrix.empty:
            messagebox.showwarning("Uwaga", "Brak wystarczajƒÖcych danych do analizy korelacji")
            return

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, analysis_text)

        # Poka≈º heatmapƒô
        fig = self.plot_manager.create_correlation_heatmap(
            correlation_matrix, "üß† Korelacje Cech Osobowo≈õci"
        )
        self.plot_manager.embed_plot_in_frame(fig, self.plot_frame)

    def analyze_substance_correlations(self):
        """Analizuje korelacje substancji"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        correlation_matrix, analysis_text = self.analyzer.analyze_correlations(
            self.processed_df, SUBSTANCE_COLS, "substance"
        )

        if correlation_matrix.empty:
            messagebox.showwarning("Uwaga", "Brak wystarczajƒÖcych danych do analizy korelacji")
            return

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, analysis_text)

        # Poka≈º heatmapƒô
        fig = self.plot_manager.create_correlation_heatmap(
            correlation_matrix, "üíä Korelacje U≈ºywania Substancji"
        )
        self.plot_manager.embed_plot_in_frame(fig, self.plot_frame)

    def apply_filter(self):
        """Stosuje wybrany filtr"""
        if self.df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        filter_option = self.filter_var.get()
        self.processed_df = self.data_processor.apply_filter(self.df, filter_option)

        if len(self.processed_df) == 0:
            messagebox.showwarning("Uwaga", f"Filtr '{filter_option}' nie zwr√≥ci≈Ç ≈ºadnych danych!")
            self.processed_df = self.df.copy()
            return

        # Poka≈º informacje o filtrowaniu
        filter_text = f"""
üéØ === ZASTOSOWANO FILTR: {filter_option} ===

üìä STATYSTYKI FILTROWANIA:
‚îú‚îÄ‚îÄ Oryginalny rozmiar: {len(self.df)} rekord√≥w
‚îú‚îÄ‚îÄ Po filtrowaniu: {len(self.processed_df)} rekord√≥w  
‚îú‚îÄ‚îÄ Odsetek zachowany: {len(self.processed_df) / len(self.df) * 100:.1f}%
‚îî‚îÄ‚îÄ Utracono: {len(self.df) - len(self.processed_df)} rekord√≥w

‚úÖ Filtr zastosowany pomy≈õlnie!
"""

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, filter_text)

        # Od≈õwie≈º tabelƒô z nowymi danymi
        self.refresh_table()

    def standardize_features(self):
        """Standaryzuje cechy"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        self.processed_df = self.data_processor.standardize_features(self.processed_df)

        text = """
üìè === STANDARYZACJA CECH OSOBOWO≈öCI ===

‚úÖ Cechy zosta≈Çy wystandaryzowane (Z-score transformation: Œº=0, œÉ=1)

üéØ KORZY≈öCI STANDARYZACJI:
‚Ä¢ Wszystkie cechy na tej samej skali
‚Ä¢ Lepsze dzia≈Çanie algorytm√≥w ML  
‚Ä¢ ≈Åatwiejsza interpretacja (jednostki = odchylenia standardowe)
‚Ä¢ Eliminacja bias zwiƒÖzanych z r√≥≈ºnymi zakresami warto≈õci

‚úÖ Utworzono nowe kolumny z sufiksem '_std'
"""

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, text)

        # Od≈õwie≈º tabelƒô
        self.refresh_table()

    def handle_missing_values(self):
        """Obs≈Çuguje brakujƒÖce warto≈õci"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        original_size = len(self.processed_df)
        self.processed_df, missing_filled = self.data_processor.handle_missing_values(self.processed_df)

        text = f"""
üîß === OBS≈ÅUGA BRAKUJƒÑCYCH WARTO≈öCI I DUPLIKAT√ìW ===

üîß ZASTOSOWANE METODY:
‚Ä¢ KNN Imputation (k=5) dla cech osobowo≈õci
‚Ä¢ Usuniƒôcie duplikat√≥w

‚úÖ WYNIKI:
‚Ä¢ Uzupe≈Çniono: {sum(missing_filled.values())} brakujƒÖcych warto≈õci
‚Ä¢ Usuniƒôto: {original_size - len(self.processed_df)} duplikat√≥w
‚Ä¢ Finalny rozmiar: {len(self.processed_df)} rekord√≥w

üí° KNN IMPUTATION:
Metoda szuka 5 najbardziej podobnych os√≥b i u≈õrednia ich warto≈õci.
Zachowuje naturalne korelacje miƒôdzy cechami osobowo≈õci.
"""

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, text)

        # Od≈õwie≈º tabelƒô
        self.refresh_table()

    def binary_encode(self):
        """Tworzy binarne kodowanie"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        self.processed_df = self.data_processor.create_binary_encoding(self.processed_df)

        text = """
üîÄ === KODOWANIE BINARNE U≈ªYWANIA SUBSTANCJI ===

‚úÖ Utworzono binarne wska≈∫niki (0=nigdy, 1=u≈ºywa≈Ç)

üí° ZASTOSOWANIA KODOWANIA BINARNEGO:
‚Ä¢ Uproszczone analizy (u≈ºywa/nie u≈ºywa)
‚Ä¢ Modele klasyfikacji binarnej
‚Ä¢ Analiza czƒôsto≈õci wystƒôpowania
‚Ä¢ Regu≈Çy asocjacyjne

‚úÖ Utworzono nowe kolumny z sufiksem '_binary'
"""

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, text)

        # Od≈õwie≈º tabelƒô
        self.refresh_table()

    def plot_personality_distributions(self):
        """Tworzy wykresy rozk≈Çad√≥w osobowo≈õci"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        fig, analysis_text = self.plot_manager.create_personality_distributions(self.processed_df)

        if fig is None:
            messagebox.showwarning("Uwaga", analysis_text)
            return

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, analysis_text)

        self.plot_manager.embed_plot_in_frame(fig, self.plot_frame)

    def plot_substance_usage(self):
        """Tworzy wykres u≈ºywania substancji"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        fig, analysis_text = self.plot_manager.create_substance_usage_plot(self.processed_df)

        if fig is None:
            messagebox.showwarning("Uwaga", analysis_text)
            return

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, analysis_text)

        self.plot_manager.embed_plot_in_frame(fig, self.plot_frame)

    def plot_demographic_boxplots(self):
        """Tworzy boxploty demograficzne"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        substance = self.substance_var.get()
        if not substance:
            messagebox.showerror("B≈ÇƒÖd", "Wybierz substancjƒô!")
            return

        fig, analysis_text = self.plot_manager.create_demographic_boxplots(self.processed_df, substance)

        if fig is None:
            messagebox.showwarning("Uwaga", analysis_text)
            return

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, analysis_text)

        self.plot_manager.embed_plot_in_frame(fig, self.plot_frame)

    def debug_demographic_data(self):
        """Debug: Sprawdza dostƒôpno≈õƒá danych demograficznych"""
        if self.processed_df is None:
            print("DEBUG: Brak danych")
            return

        print("=== DEBUG DANYCH DEMOGRAFICZNYCH ===")
        print(f"Kolumny w DataFrame: {len(self.processed_df.columns)}")
        print(f"Wiersze w DataFrame: {len(self.processed_df)}")

        print("\nüìä KOLUMNY DEMOGRAFICZNE:")
        for col in DEMOGRAPHIC_COLS:
            if col in self.processed_df.columns:
                print(f"‚úÖ {col}: {self.processed_df[col].dtype}")
                cat_col = f"{col}_Category"
                if cat_col in self.processed_df.columns:
                    print(f"‚úÖ {cat_col}: {self.processed_df[cat_col].nunique()} kategorii")
                    print(f"   Przyk≈Çady: {self.processed_df[cat_col].dropna().unique()[:3]}")
                else:
                    print(f"‚ùå {cat_col}: BRAK")
            else:
                print(f"‚ùå {col}: BRAK")

        print("\nüß™ KOLUMNY SUBSTANCJI:")
        substance_count = 0
        for col in SUBSTANCE_COLS[:5]:  # Pierwsze 5
            if col in self.processed_df.columns:
                substance_count += 1
                non_zero = (self.processed_df[col] > 0).sum()
                print(f"‚úÖ {col}: {non_zero} u≈ºytkownik√≥w")
            else:
                print(f"‚ùå {col}: BRAK")

        print(f"\nPODSUMOWANIE:")
        print(f"‚Ä¢ Dostƒôpne kolumny demograficzne: {len([col for col in DEMOGRAPHIC_COLS if col in self.processed_df.columns])}")
        print(f"‚Ä¢ Dostƒôpne kategorie demograficzne: {len([f'{col}_Category' for col in DEMOGRAPHIC_COLS if f'{col}_Category' in self.processed_df.columns])}")
        print(f"‚Ä¢ Dostƒôpne substancje: {substance_count}")

        # Test analizy demograficznej
        available_substances = [col for col in SUBSTANCE_COLS if col in self.processed_df.columns]
        if available_substances:
            test_substance = available_substances[0]
            print(f"\nüß™ TEST ANALIZY: {test_substance}")

            try:
                if hasattr(self.analyzer, 'analyze_demographic_differences'):
                    print("‚úÖ Metoda analyze_demographic_differences istnieje")
                    # Test call (bez wy≈õwietlania wyniku)
                    result = self.analyzer.analyze_demographic_differences(self.processed_df, test_substance)
                    print(f"‚úÖ Analiza wykonana, d≈Çugo≈õƒá: {len(result)} znak√≥w")
                else:
                    print("‚ùå Metoda analyze_demographic_differences BRAK")

                if hasattr(self.analyzer, 'create_demographic_histograms'):
                    print("‚úÖ Metoda create_demographic_histograms istnieje")
                else:
                    print("‚ùå Metoda create_demographic_histograms BRAK")

            except Exception as e:
                print(f"‚ùå B≈ÇƒÖd testu: {str(e)}")

        print("=== KONIEC DEBUG ===")

    def test_demographic_histograms(self):
        """Test metoda dla histogram√≥w demograficznych"""
        if self.processed_df is None:
            messagebox.showwarning("Uwaga", "Najpierw wczytaj dane testowe!")
            return

        # Sprawd≈∫ czy Cannabis istnieje
        if 'Cannabis' not in self.processed_df.columns:
            available_substances = [col for col in SUBSTANCE_COLS if col in self.processed_df.columns]
            if available_substances:
                test_substance = available_substances[0]
                messagebox.showinfo("Info", f"Cannabis nie znaleziono, u≈ºywam: {test_substance}")
                self.substance_var.set(test_substance)
            else:
                messagebox.showerror("B≈ÇƒÖd", "Brak substancji w danych!")
                return
        else:
            self.substance_var.set('Cannabis')

        print("TEST: Uruchamiam histogramy demograficzne...")
        self.plot_demographic_histograms()

    def plot_demographic_histograms(self):
        """Tworzy histogramy demograficzne"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        substance = self.substance_var.get()
        if not substance:
            messagebox.showerror("B≈ÇƒÖd", "Wybierz substancjƒô!")
            return

        analysis_text = self.analyzer.analyze_demographic_differences(self.processed_df, substance)

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, analysis_text)

    def plot_all_substances_comparison(self):
        """Por√≥wnuje wszystkie substancje"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        try:
            # Znajd≈∫ istniejƒÖce kolumny substancji i osobowo≈õci
            existing_substance_cols = [col for col in SUBSTANCE_COLS if col in self.processed_df.columns]
            existing_personality_cols = [col for col in PERSONALITY_COLS if col in self.processed_df.columns]

            if len(existing_substance_cols) < 3 or len(existing_personality_cols) < 3:
                messagebox.showwarning("Uwaga", "Za ma≈Ço danych do por√≥wnania substancji")
                return

            # Oblicz ≈õrednie cechy osobowo≈õci dla u≈ºytkownik√≥w ka≈ºdej substancji
            substance_profiles = {}
            comparison_text = "üå°Ô∏è === POR√ìWNANIE WSZYSTKICH SUBSTANCJI ===\n\n"
            comparison_text += "≈örednie warto≈õci cech osobowo≈õci dla u≈ºytkownik√≥w ka≈ºdej substancji:\n\n"

            for substance in existing_substance_cols:
                users = self.processed_df[self.processed_df[substance] > 0]
                if len(users) >= 10:  # Minimum 10 u≈ºytkownik√≥w
                    means = []
                    for trait in existing_personality_cols:
                        mean_val = users[trait].mean()
                        means.append(mean_val)
                    substance_profiles[substance] = means

                    comparison_text += f"üíä {substance} (n={len(users)}):\n"
                    for trait, mean_val in zip(existing_personality_cols, means):
                        level = "üî¥" if mean_val > 0.3 else "üü†" if mean_val > 0.1 else "üü°" if mean_val > -0.1 else "üîµ" if mean_val > -0.3 else "üü£"
                        comparison_text += f"  {trait}: {mean_val:+.3f} {level}\n"
                    comparison_text += "\n"

            if not substance_profiles:
                messagebox.showwarning("Uwaga", "Brak wystarczajƒÖcych danych do por√≥wnania")
                return

            # Utw√≥rz DataFrame dla heatmapy
            df_heatmap = pd.DataFrame(substance_profiles, index=existing_personality_cols).T

            # Wyczy≈õƒá poprzednie wykresy
            for widget in self.plot_frame.winfo_children():
                widget.destroy()

            # Tw√≥rz wykresy
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 12))

            # G≈Ç√≥wna heatmapa
            import seaborn as sns
            sns.heatmap(df_heatmap, annot=True, fmt='.2f', cmap='RdBu_r', center=0,
                        cbar_kws={'label': '≈örednia znormalizowana'}, ax=ax1,
                        linewidths=0.5, square=False)

            ax1.set_title('üå°Ô∏è Profile Cech Osobowo≈õci dla U≈ºytkownik√≥w R√≥≈ºnych Substancji',
                          fontsize=14, fontweight='bold')
            ax1.set_xlabel('Cechy Osobowo≈õci', fontweight='bold')
            ax1.set_ylabel('Substancje', fontweight='bold')

            # Dendrogram klastrowania
            try:
                from scipy.cluster.hierarchy import dendrogram, linkage

                # Oblicz linkage dla substancji
                linkage_matrix = linkage(df_heatmap.values, method='ward')

                dendrogram(linkage_matrix, labels=df_heatmap.index, ax=ax2,
                           leaf_rotation=45, leaf_font_size=10)
                ax2.set_title('üå≥ Dendrogram Klastr√≥w Substancji (na podstawie profili osobowo≈õci)',
                              fontweight='bold')
                ax2.set_xlabel('Substancje')
                ax2.set_ylabel('Odleg≈Ço≈õƒá')
            except Exception as e:
                # Je≈õli dendrogram nie dzia≈Ça, zr√≥b wykres s≈Çupkowy
                substance_means = df_heatmap.mean(axis=1).sort_values(ascending=False)
                bars = ax2.bar(range(len(substance_means)), substance_means.values)
                ax2.set_xticks(range(len(substance_means)))
                ax2.set_xticklabels(substance_means.index, rotation=45)
                ax2.set_title('üìä ≈öredni Poziom Cech Osobowo≈õci wed≈Çug Substancji', fontweight='bold')
                ax2.set_ylabel('≈örednia warto≈õƒá cech')

            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()

            # Identyfikacja klastr√≥w
            comparison_text += "üéØ IDENTYFIKACJA KLASTR√ìW:\n"
            comparison_text += "‚îÄ" * 30 + "\n"

            # Znajd≈∫ substancje z podobnymi profilami (uproszczone klastrowanie)
            try:
                from sklearn.cluster import KMeans
                if len(df_heatmap) >= 4:
                    kmeans = KMeans(n_clusters=min(4, len(df_heatmap)), random_state=42)
                    cluster_labels = kmeans.fit_predict(df_heatmap.values)

                    for cluster_id in range(kmeans.n_clusters):
                        cluster_substances = df_heatmap.index[cluster_labels == cluster_id].tolist()
                        if cluster_substances:
                            comparison_text += f"üîó Klaster {cluster_id + 1}: {', '.join(cluster_substances)}\n"
            except Exception as e:
                comparison_text += "Nie mo≈ºna wykonaƒá klastrowania automatycznego\n"

            # Poka≈º wyniki
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, comparison_text)

            # Osad≈∫ wykres
            canvas = FigureCanvasTkAgg(fig, self.plot_frame)
            canvas.draw()
            canvas.get_tk_widget().grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna wykonaƒá por√≥wnania substancji: {str(e)}")
            print(f"B≈ÇƒÖd w plot_all_substances_comparison: {str(e)}")

    def analyze_cluster_demographics(self):
        """Analizuje demografiƒô klastr√≥w"""
        if self.cluster_analyzer.cluster_labels is None:
            messagebox.showwarning("Uwaga", "Najpierw wykonaj analizƒô klastr√≥w!")
            return

    def analyze_cluster_demographics(self):
        """Analizuje demografiƒô klastr√≥w"""
        if self.cluster_analyzer.cluster_labels is None:
            messagebox.showwarning("Uwaga", "Najpierw wykonaj analizƒô klastr√≥w!")
            return

        try:
            # POPRAWKA: U≈ºyj tych samych indeks√≥w co przy klastrowaniu
            existing_personality_cols = [col for col in PERSONALITY_COLS if col in self.processed_df.columns]
            features = self.processed_df[existing_personality_cols].dropna()

            if len(self.cluster_analyzer.cluster_labels) != len(features):
                messagebox.showerror("B≈ÇƒÖd",
                                     f"Niezgodno≈õƒá d≈Çugo≈õci cluster_labels ({len(self.cluster_analyzer.cluster_labels)}) vs features ({len(features)})")
                return

            # U≈ºyj tylko wierszy kt√≥re by≈Çy w klastrowania
            cluster_demo_df = self.processed_df.loc[features.index].copy()
            cluster_demo_df['Cluster'] = self.cluster_analyzer.cluster_labels

            demo_text = "üë• === DEMOGRAFIA KLASTR√ìW OSOBOWO≈öCI ===\n\n"
            demo_text += f"Analiza demograficzna {len(cluster_demo_df)} os√≥b w 4 klastrach osobowo≈õci\n\n"

            for cluster_id in range(4):
                cluster_data = cluster_demo_df[cluster_demo_df['Cluster'] == cluster_id]
                if len(cluster_data) == 0:
                    continue

                profile = self.cluster_analyzer.cluster_profiles.get(cluster_id, {
                    'name': f'Klaster {cluster_id}',
                    'emoji': '‚ùì',
                    'risk': 'Nieznane'
                })

                demo_text += f"{profile['emoji']} KLASTER {cluster_id}: {profile['name']}\n"
                demo_text += f"üìä Wielko≈õƒá: {len(cluster_data)} os√≥b ({len(cluster_data) / len(cluster_demo_df) * 100:.1f}%)\n"
                demo_text += f"üéØ Poziom ryzyka: {profile['risk']}\n"
                demo_text += "‚îÄ" * 60 + "\n"

                # Analiza wieku
                if 'Age_Category' in cluster_data.columns:
                    age_dist = cluster_data['Age_Category'].value_counts()
                    if len(age_dist) > 0:
                        demo_text += "üë∂ ROZK≈ÅAD WIEKU:\n"
                        for age_cat, count in age_dist.items():
                            pct = count / len(cluster_data) * 100
                            demo_text += f"  {age_cat}: {count} os√≥b ({pct:.1f}%)\n"
                        demo_text += f"  DominujƒÖca grupa: {age_dist.index[0]}\n\n"

                # Analiza p≈Çci
                if 'Gender_Category' in cluster_data.columns:
                    gender_dist = cluster_data['Gender_Category'].value_counts()
                    if len(gender_dist) > 0:
                        demo_text += "‚ößÔ∏è ROZK≈ÅAD P≈ÅCI:\n"
                        for gender, count in gender_dist.items():
                            pct = count / len(cluster_data) * 100
                            demo_text += f"  {gender}: {count} os√≥b ({pct:.1f}%)\n"

                        # Okre≈õl czy jest bias p≈Çciowy
                        if len(gender_dist) >= 2:
                            max_pct = gender_dist.max() / len(cluster_data) * 100
                            if max_pct > 60:
                                dominant_gender = gender_dist.index[0]
                                demo_text += f"  üéØ Dominacja: {dominant_gender} ({max_pct:.1f}%)\n"
                        demo_text += "\n"

                # Analiza wykszta≈Çcenia
                if 'Education_Category' in cluster_data.columns:
                    edu_dist = cluster_data['Education_Category'].value_counts()
                    if len(edu_dist) > 0:
                        demo_text += "üéì WYKSZTA≈ÅCENIE (top 3):\n"
                        for edu, count in edu_dist.head(3).items():
                            pct = count / len(cluster_data) * 100
                            demo_text += f"  {edu}: {count} os√≥b ({pct:.1f}%)\n"
                        demo_text += "\n"

                # Analiza kraj√≥w
                if 'Country_Category' in cluster_data.columns:
                    country_dist = cluster_data['Country_Category'].value_counts()
                    if len(country_dist) > 0:
                        demo_text += "üåç POCHODZENIE (top 3):\n"
                        for country, count in country_dist.head(3).items():
                            pct = count / len(cluster_data) * 100
                            demo_text += f"  {country}: {count} os√≥b ({pct:.1f}%)\n"
                        demo_text += "\n"

                demo_text += "\n"

            # Por√≥wnania miƒôdzy klastrami
            demo_text += "üîç POR√ìWNANIA DEMOGRAFICZNE:\n"
            demo_text += "=" * 40 + "\n"

            # Analiza wieku miƒôdzy klastrami
            if 'Age_Category' in cluster_demo_df.columns:
                demo_text += "\nüë∂ R√ì≈ªNICE WIEKOWE:\n"
                age_by_cluster = cluster_demo_df.groupby(['Cluster', 'Age_Category']).size().unstack(fill_value=0)
                age_percentages = age_by_cluster.div(age_by_cluster.sum(axis=1), axis=0) * 100

                for age_group in age_percentages.columns:
                    cluster_percentages = age_percentages[age_group].sort_values(ascending=False)
                    highest_cluster = cluster_percentages.index[0]
                    highest_pct = cluster_percentages.iloc[0]

                    profile = self.cluster_analyzer.cluster_profiles.get(highest_cluster, {'name': f'Klaster {highest_cluster}'})
                    if highest_pct > 30:  # ZnaczƒÖca r√≥≈ºnica
                        demo_text += f"‚Ä¢ {age_group}: najczƒô≈õciej {profile['name']} ({highest_pct:.1f}%)\n"

            # Analiza p≈Çci miƒôdzy klastrami
            if 'Gender_Category' in cluster_demo_df.columns:
                demo_text += "\n‚ößÔ∏è R√ì≈ªNICE P≈ÅCIOWE:\n"
                gender_by_cluster = cluster_demo_df.groupby(['Cluster', 'Gender_Category']).size().unstack(fill_value=0)
                if 'Male' in gender_by_cluster.columns and 'Female' in gender_by_cluster.columns:
                    gender_percentages = gender_by_cluster.div(gender_by_cluster.sum(axis=1), axis=0) * 100

                    male_percentages = gender_percentages['Male'].sort_values(ascending=False)
                    female_percentages = gender_percentages['Female'].sort_values(ascending=False)

                    most_male_cluster = male_percentages.index[0]
                    most_female_cluster = female_percentages.index[0]

                    male_profile = self.cluster_analyzer.cluster_profiles.get(most_male_cluster, {'name': f'Klaster {most_male_cluster}'})
                    female_profile = self.cluster_analyzer.cluster_profiles.get(most_female_cluster, {'name': f'Klaster {most_female_cluster}'})

                    demo_text += f"‚Ä¢ Wiƒôcej mƒô≈ºczyzn: {male_profile['name']} ({male_percentages.iloc[0]:.1f}%)\n"
                    demo_text += f"‚Ä¢ Wiƒôcej kobiet: {female_profile['name']} ({female_percentages.iloc[0]:.1f}%)\n"

            # Wnioski i implikacje
            demo_text += f"\nüí° WNIOSKI I IMPLIKACJE:\n"
            demo_text += "=" * 25 + "\n"
            demo_text += "‚Ä¢ Profile osobowo≈õci majƒÖ zwiƒÖzek z charakterystykami demograficznymi\n"
            demo_text += "‚Ä¢ R√≥≈ºne grupy wiekowe wykazujƒÖ r√≥≈ºne wzorce osobowo≈õci\n"
            demo_text += "‚Ä¢ Interwencje powinny uwzglƒôdniaƒá kontekst demograficzny\n"
            demo_text += "‚Ä¢ Targeted prevention programs dla specific demographic-personality profiles\n"

            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, demo_text)

        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna wykonaƒá analizy demografii klastr√≥w: {str(e)}")
            print(f"B≈ÇƒÖd w analyze_cluster_demographics: {str(e)}")
        """Przeprowadza klastrowanie K-means"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        success, message, cluster_labels = self.cluster_analyzer.perform_clustering(self.processed_df)

        if not success:
            messagebox.showerror("B≈ÇƒÖd", message)
            return

        # Poka≈º analizƒô tekstowƒÖ
        analysis_text = self.cluster_analyzer.get_cluster_analysis_text(self.processed_df)
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, analysis_text)

        # Poka≈º wizualizacjƒô
        fig, additional_text = self.cluster_analyzer.create_cluster_visualization(self.processed_df)
        if fig:
            self.plot_manager.embed_plot_in_frame(fig, self.plot_frame)

    def perform_enhanced_clustering(self):
        """Przeprowadza klastrowanie K-means"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        try:
            success, message, cluster_labels = self.cluster_analyzer.perform_clustering(self.processed_df)

            if not success:
                messagebox.showerror("B≈ÇƒÖd", message)
                return

            # Poka≈º analizƒô tekstowƒÖ
            analysis_text = self.cluster_analyzer.get_cluster_analysis_text(self.processed_df)
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, analysis_text)

            # Poka≈º wizualizacjƒô
            fig, additional_text = self.cluster_analyzer.create_cluster_visualization(self.processed_df)
            if fig:
                self.plot_manager.embed_plot_in_frame(fig, self.plot_frame)

            messagebox.showinfo("Sukces", "‚úÖ Analiza klastr√≥w zako≈Ñczona pomy≈õlnie!")

        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna wykonaƒá klastrowania: {str(e)}")
            print(f"B≈ÇƒÖd w perform_enhanced_clustering: {str(e)}")

    def perform_classification(self):
        """Przeprowadza klasyfikacjƒô Random Forest"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        substance = self.classification_substance_var.get()
        if not substance:
            messagebox.showerror("B≈ÇƒÖd", "Wybierz substancjƒô do przewidywania!")
            return

        result = self.classification_manager.perform_classification(self.processed_df, substance)

        if result['success']:
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, result['analysis_text'])

            if result['figure']:
                self.plot_manager.embed_plot_in_frame(result['figure'], self.plot_frame)
        else:
            messagebox.showerror("B≈ÇƒÖd", result['message'])

    def compare_all_classifications(self):
        """Por√≥wnuje klasyfikacje wszystkich substancji"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        result = self.classification_manager.compare_all_substances(self.processed_df)

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, result['analysis_text'])

        if result['figure']:
            self.plot_manager.embed_plot_in_frame(result['figure'], self.plot_frame)

    def analyze_cluster_substance_patterns(self):
        """Analizuje wzorce substancji w klastrach"""
        if self.cluster_analyzer.cluster_labels is None:
            messagebox.showwarning("Uwaga", "Najpierw wykonaj analizƒô klastr√≥w!")
            return

        analysis_text = self.cluster_analyzer.analyze_cluster_substance_patterns(self.processed_df)

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, analysis_text)

    def analyze_cluster_demographics(self):
        """Analizuje demografiƒô klastr√≥w"""
        if self.cluster_analyzer.cluster_labels is None:
            messagebox.showwarning("Uwaga", "Najpierw wykonaj analizƒô klastr√≥w!")
            return

        # TODO: Implementacja analizy demografii klastr√≥w
        messagebox.showinfo("Info", "Funkcja w przygotowaniu...")

    def create_risk_assessment(self):
        """Tworzy narzƒôdzie oceny ryzyka"""
        if self.processed_df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj dane!")
            return

        try:
            # Znajd≈∫ istniejƒÖce kolumny
            existing_personality_cols = [col for col in PERSONALITY_COLS if col in self.processed_df.columns]
            existing_substance_cols = [col for col in SUBSTANCE_COLS if col in self.processed_df.columns]

            if len(existing_personality_cols) < 3:
                messagebox.showwarning("Uwaga", "Za ma≈Ço cech osobowo≈õci do oceny ryzyka")
                return

            # Oblicz wska≈∫niki ryzyka dla ka≈ºdej osoby na podstawie osobowo≈õci
            risk_scores = {}
            key_substances = ['Cannabis', 'Cocaine', 'Heroin', 'LSD', 'Alcohol']

            for substance in key_substances:
                if substance in existing_substance_cols:
                    # Proste modele ryzyka oparte na kluczowych cechach osobowo≈õci
                    if substance == 'Cannabis':
                        risk_scores[substance] = (
                                0.3 * self.processed_df.get('SensationSeeking', 0) +
                                0.25 * self.processed_df.get('Impulsiveness', 0) +
                                0.2 * self.processed_df.get('Openness', 0) -
                                0.15 * self.processed_df.get('Conscientiousness', 0)
                        )
                    elif substance == 'Cocaine':
                        risk_scores[substance] = (
                                0.35 * self.processed_df.get('Impulsiveness', 0) +
                                0.3 * self.processed_df.get('SensationSeeking', 0) +
                                0.2 * self.processed_df.get('Neuroticism', 0) -
                                0.2 * self.processed_df.get('Conscientiousness', 0)
                        )
                    elif substance == 'Heroin':
                        risk_scores[substance] = (
                                0.4 * self.processed_df.get('Impulsiveness', 0) +
                                0.3 * self.processed_df.get('Neuroticism', 0) +
                                0.2 * self.processed_df.get('SensationSeeking', 0) -
                                0.25 * self.processed_df.get('Conscientiousness', 0)
                        )
                    elif substance == 'LSD':
                        risk_scores[substance] = (
                                0.4 * self.processed_df.get('Openness', 0) +
                                0.3 * self.processed_df.get('SensationSeeking', 0) +
                                0.15 * self.processed_df.get('Extraversion', 0) -
                                0.1 * self.processed_df.get('Neuroticism', 0)
                        )
                    elif substance == 'Alcohol':
                        risk_scores[substance] = (
                                0.25 * self.processed_df.get('Extraversion', 0) +
                                0.2 * self.processed_df.get('SensationSeeking', 0) +
                                0.15 * self.processed_df.get('Impulsiveness', 0) -
                                0.1 * self.processed_df.get('Conscientiousness', 0)
                        )

            # Utw√≥rz raport oceny ryzyka
            risk_text = "üö® === NARZƒòDZIE OCENY RYZYKA U≈ªYWANIA SUBSTANCJI ===\n\n"
            risk_text += "üìä Model oparty na analizie cech osobowo≈õci z UCI Dataset\n"
            risk_text += "‚ö†Ô∏è Tylko do cel√≥w edukacyjnych i badawczych!\n\n"

            risk_text += "üéØ PERCENTYLE RYZYKA W POPULACJI:\n"
            risk_text += "‚îÄ" * 50 + "\n"

            for substance, scores in risk_scores.items():
                if len(scores) > 0:
                    percentiles = [10, 25, 50, 75, 90]
                    risk_percentiles = np.percentile(scores, percentiles)

                    risk_text += f"\nüíä {substance.upper()}:\n"
                    for i, (perc, value) in enumerate(zip(percentiles, risk_percentiles)):
                        if perc <= 25:
                            risk_level = "üü¢ NISKIE"
                        elif perc <= 50:
                            risk_level = "üü° UMIARKOWANE"
                        elif perc <= 75:
                            risk_level = "üü† WYSOKIE"
                        else:
                            risk_level = "üî¥ BARDZO WYSOKIE"

                        risk_text += f"  {perc:>2}. percentyl: {value:>6.2f} ({risk_level})\n"

            # Dystrybucja ryzyka w populacji
            risk_text += f"\nüìä DYSTRYBUCJA RYZYKA W POPULACJI:\n"
            risk_text += "‚îÄ" * 40 + "\n"

            for substance, scores in risk_scores.items():
                if len(scores) > 0:
                    high_risk = (scores > np.percentile(scores, 75)).sum()
                    moderate_risk = ((scores > np.percentile(scores, 25)) &
                                     (scores <= np.percentile(scores, 75))).sum()
                    low_risk = (scores <= np.percentile(scores, 25)).sum()

                    risk_text += f"\n{substance}:\n"
                    risk_text += f"  üî¥ Wysokie ryzyko: {high_risk} os√≥b ({high_risk / len(scores) * 100:.1f}%)\n"
                    risk_text += f"  üü° Umiarkowane: {moderate_risk} os√≥b ({moderate_risk / len(scores) * 100:.1f}%)\n"
                    risk_text += f"  üü¢ Niskie ryzyko: {low_risk} os√≥b ({low_risk / len(scores) * 100:.1f}%)\n"

            # Analiza czynnik√≥w ryzyka
            risk_text += f"\nüîç KLUCZOWE CZYNNIKI RYZYKA:\n"
            risk_text += "‚îÄ" * 30 + "\n"
            risk_text += "üî¥ IMPULSYWNO≈öƒÜ: Najsilniejszy predyktor u≈ºywania substancji twardych\n"
            risk_text += "üü† SENSATION SEEKING: Silnie zwiƒÖzane z eksperymentowaniem\n"
            risk_text += "üü° NEUROTYZM: Predyktor self-medication behaviors\n"
            risk_text += "üîµ OTWARTO≈öƒÜ: Predyktor psychedelik√≥w i nowych do≈õwiadcze≈Ñ\n"
            risk_text += "üü¢ SUMIENNO≈öƒÜ: Czynnik ochronny przed u≈ºywaniem substancji\n"

            # Rekomendacje zastosowania
            risk_text += f"\nüí° REKOMENDACJE ZASTOSOWANIA:\n"
            risk_text += "‚îÄ" * 35 + "\n"
            risk_text += "üéØ Screening populacyjny - identyfikacja grup wysokiego ryzyka\n"
            risk_text += "üè• Planowanie interwencji - dopasowanie do poziomu ryzyka\n"
            risk_text += "üìö Badania naukowe - stratyfikacja pr√≥by badawczej\n"
            risk_text += "üéì Edukacja - demonstracja czynnik√≥w ryzyka\n"
            risk_text += "üî¨ Prevention research - targeted interventions\n\n"

            risk_text += "‚ö†Ô∏è WA≈ªNE OGRANICZENIA:\n"
            risk_text += "‚Ä¢ Model uproszczony - rzeczywiste ryzyko zale≈ºy od wielu czynnik√≥w\n"
            risk_text += "‚Ä¢ Nie uwzglƒôdnia czynnik√≥w ≈õrodowiskowych i spo≈Çecznych\n"
            risk_text += "‚Ä¢ Oparte na self-report data - mo≈ºliwe bias\n"
            risk_text += "‚Ä¢ Nie zastƒôpuje profesjonalnej oceny klinicznej\n"
            risk_text += "‚Ä¢ Tylko do cel√≥w badawczych i edukacyjnych\n"

            # Przyk≈Çad interpretacji
            if len(risk_scores) > 0:
                risk_text += f"\nüìã PRZYK≈ÅAD INTERPRETACJI WYNIK√ìW:\n"
                risk_text += "‚îÄ" * 35 + "\n"

                # Znajd≈∫ osobƒô o wysokim ryzyku jako przyk≈Çad
                for substance, scores in risk_scores.items():
                    if len(scores) > 0:
                        high_risk_threshold = np.percentile(scores, 75)
                        high_risk_indices = scores[scores > high_risk_threshold].index[:1]

                        if len(high_risk_indices) > 0:
                            idx = high_risk_indices[0]
                            risk_score = scores.iloc[idx]

                            risk_text += f"üë§ Osoba #{idx} - {substance}:\n"
                            risk_text += f"  üìä Wynik ryzyka: {risk_score:.3f}\n"
                            risk_text += f"  üìç Percentyl: {(scores <= risk_score).mean() * 100:.0f}\n"

                            if risk_score > np.percentile(scores, 90):
                                risk_text += f"  üö® Interpretacja: BARDZO WYSOKIE RYZYKO\n"
                                risk_text += f"  üí° Rekomendacja: Priorytetowa interwencja, monitoring\n"
                            elif risk_score > np.percentile(scores, 75):
                                risk_text += f"  üü† Interpretacja: WYSOKIE RYZYKO\n"
                                risk_text += f"  üí° Rekomendacja: Interwencja prewencyjna, edukacja\n"
                            break

            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, risk_text)

            # Wizualizacja dystrybucji ryzyka
            if risk_scores:
                self.create_risk_visualization(risk_scores)

        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna utworzyƒá narzƒôdzia oceny ryzyka: {str(e)}")
            print(f"B≈ÇƒÖd w create_risk_assessment: {str(e)}")

    def create_risk_visualization(self, risk_scores):
        """Tworzy wizualizacjƒô rozk≈Çad√≥w ryzyka"""
        try:
            # Wyczy≈õƒá poprzednie wykresy
            for widget in self.plot_frame.winfo_children():
                widget.destroy()

            # Tw√≥rz wykresy
            n_substances = len(risk_scores)
            if n_substances == 0:
                return

            fig, axes = plt.subplots(2, (n_substances + 1) // 2, figsize=(15, 10))
            fig.suptitle('üö® Rozk≈Çady Ryzyka U≈ºywania Substancji\n(na podstawie cech osobowo≈õci)',
                         fontsize=14, fontweight='bold')

            if n_substances == 1:
                axes = [axes]
            elif n_substances <= 2:
                axes = axes.flatten() if hasattr(axes, 'flatten') else [axes]
            else:
                axes = axes.flatten()

            colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7']

            for i, (substance, scores) in enumerate(risk_scores.items()):
                if i >= len(axes):
                    break

                ax = axes[i]

                # Histogram rozk≈Çadu ryzyka
                n, bins, patches = ax.hist(scores, bins=30, alpha=0.7,
                                           color=colors[i % len(colors)],
                                           edgecolor='white', linewidth=0.5)

                # Linie percentyli
                percentiles = [25, 50, 75, 90]
                percentile_values = np.percentile(scores, percentiles)
                line_colors = ['green', 'orange', 'red', 'darkred']

                for perc, value, color in zip(percentiles, percentile_values, line_colors):
                    ax.axvline(value, color=color, linestyle='--', linewidth=2, alpha=0.8,
                               label=f'{perc}p: {value:.2f}')

                ax.set_title(f'{substance}\n(Œº={scores.mean():.2f}, œÉ={scores.std():.2f})',
                             fontweight='bold')
                ax.set_xlabel('Wynik ryzyka')
                ax.set_ylabel('Liczba os√≥b')
                ax.legend(fontsize=8)
                ax.grid(True, alpha=0.3)

            # Usu≈Ñ nieu≈ºywane subploty
            for i in range(len(risk_scores), len(axes)):
                fig.delaxes(axes[i])

            plt.tight_layout()

            # Osad≈∫ wykres
            canvas = FigureCanvasTkAgg(fig, self.plot_frame)
            canvas.draw()
            canvas.get_tk_widget().grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        except Exception as e:
            print(f"B≈ÇƒÖd w create_risk_visualization: {str(e)}")

    # === METODY POMOCNICZE I ALIASY ===

    def perform_clustering(self):
        """Alias dla perform_enhanced_clustering"""
        return self.perform_enhanced_clustering()

    def show_cluster_analysis(self):
        """Alias dla analyze_cluster_substance_patterns"""
        return self.analyze_cluster_substance_patterns()

    def show_demographic_analysis(self):
        """Alias dla analyze_cluster_demographics"""
        return self.analyze_cluster_demographics()

    def show_risk_assessment(self):
        """Alias dla create_risk_assessment"""
        return self.create_risk_assessment()

    def get_processed_data(self):
        """Zwraca przetworzone dane"""
        return self.processed_df

    def get_original_data(self):
        """Zwraca oryginalne dane"""
        return self.df

    def is_data_loaded(self):
        """Sprawdza czy dane sƒÖ wczytane"""
        return self.processed_df is not None

    def get_available_substances(self):
        """Zwraca listƒô dostƒôpnych substancji"""
        if self.processed_df is None:
            return []
        return [col for col in SUBSTANCE_COLS if col in self.processed_df.columns]

    def get_available_personality_traits(self):
        """Zwraca listƒô dostƒôpnych cech osobowo≈õci"""
        if self.processed_df is None:
            return []
        return [col for col in PERSONALITY_COLS if col in self.processed_df.columns]

    def refresh_ui(self):
        """Od≈õwie≈ºa ca≈Çe UI"""
        if self.processed_df is not None:
            self.refresh_table()
            self.update_substance_combos()

    def reset_analysis(self):
        """Resetuje analizy (zachowuje dane)"""
        if hasattr(self, 'cluster_analyzer'):
            self.cluster_analyzer.cluster_labels = None

        # Wyczy≈õƒá wyniki
        if self.result_text:
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, "Analizy zosta≈Çy zresetowane.\nMo≈ºesz rozpoczƒÖƒá nowe analizy.")

    def export_current_analysis(self):
        """Eksportuje bie≈ºƒÖcƒÖ analizƒô do pliku tekstowego"""
        if not self.result_text:
            messagebox.showwarning("Uwaga", "Brak wynik√≥w do eksportu!")
            return

        content = self.result_text.get(1.0, tk.END)
        if not content.strip():
            messagebox.showwarning("Uwaga", "Brak wynik√≥w do eksportu!")
            return

        file_path = filedialog.asksaveasfilename(
            title="Eksportuj analizƒô",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )

        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                messagebox.showinfo("Sukces", f"Analiza zapisana do: {file_path}")
            except Exception as e:
                messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna zapisaƒá pliku: {str(e)}")

    def show_help(self):
        """Pokazuje okno pomocy"""
        help_window = tk.Toplevel(self.root)
        help_window.title("üìö Pomoc - UCI Drug Consumption Analyzer")
        help_window.geometry("600x400")
        help_window.transient(self.root)

        help_text = scrolledtext.ScrolledText(help_window, wrap=tk.WORD)
        help_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        help_content = """
üß† UCI DRUG CONSUMPTION ANALYZER - POMOC

üìã PODSTAWOWE KROKI:
1. Wczytaj dane: "üìÇ Wczytaj dane UCI" lub "üß™ Utw√≥rz dane testowe"
2. Sprawd≈∫ tabelƒô: Zak≈Çadka "üìã Tabela Danych"
3. Wykonaj analizy: U≈ºyj przycisk√≥w w panelu kontrolnym

üìä G≈Å√ìWNE FUNKCJE:
‚Ä¢ Statystyki opisowe - podstawowe statystyki wszystkich zmiennych
‚Ä¢ Korelacje - zwiƒÖzki miƒôdzy cechami osobowo≈õci i substancjami
‚Ä¢ Filtrowanie - wyb√≥r konkretnych grup danych
‚Ä¢ Klastrowanie - identyfikacja profili osobowo≈õci
‚Ä¢ Klasyfikacja - przewidywanie u≈ºywania substancji

üìã EDYCJA DANYCH:
‚Ä¢ Podw√≥jne klikniƒôcie na kom√≥rkƒô = edycja
‚Ä¢ Enter = zapisz, Escape = anuluj
‚Ä¢ "üíæ Zapisz zmiany" - eksport do CSV

üéØ WSKAZ√ìWKI:
‚Ä¢ U≈ºyj danych testowych do nauki obs≈Çugi
‚Ä¢ Sprawd≈∫ wszystkie zak≈Çadki (Tabela, Tekstowe, Wykresy)
‚Ä¢ Filtry pomagajƒÖ analizowaƒá konkretne grupy
‚Ä¢ Klastrowanie pokazuje profile osobowo≈õci
‚Ä¢ Eksportuj wyniki do dalszej analizy

‚ùó ROZWIƒÑZYWANIE PROBLEM√ìW:
‚Ä¢ B≈Çƒôdy wczytywania: U≈ºyj danych testowych
‚Ä¢ Brak danych: Sprawd≈∫ czy plik ma 32 kolumny
‚Ä¢ B≈Çƒôdy filtr√≥w: Sprawd≈∫ czy dane majƒÖ kolumny demograficzne
‚Ä¢ Powolne dzia≈Çanie: U≈ºyj mniejszych zbior√≥w danych

üìû KONTAKT:
Autor: Karol DƒÖbrowski
Dataset: UCI Drug Consumption (Quantified)
"""

        help_text.insert(tk.END, help_content)
        help_text.config(state=tk.DISABLED)

    def show_about(self):
        """Pokazuje okno o aplikacji"""
        about_text = """
üß† UCI Drug Consumption Analyzer v1.2

üìã OPIS:
Zaawansowana aplikacja do analizy wzorc√≥w konsumpcji 
narkotyk√≥w na podstawie cech osobowo≈õci Big Five.

‚ú® FUNKCJONALNO≈öCI:
‚Ä¢ Kompletna implementacja wymaga≈Ñ na ocenƒô 3
‚Ä¢ Edytowalna tabela danych
‚Ä¢ Zaawansowane analizy ML (klastrowanie, klasyfikacja)
‚Ä¢ Interaktywne wizualizacje z interpretacjami
‚Ä¢ Narzƒôdzia oceny ryzyka

üë®‚Äçüíª AUTOR: Karol DƒÖbrowski
üìä DATASET: UCI Drug Consumption (Quantified)
üéì PROJEKT: Analiza danych - ocena 3
üìÖ ROK: 2024

üîß TECHNOLOGIE:
Python, pandas, scikit-learn, matplotlib, tkinter

‚ö†Ô∏è DISCLAIMER:
Aplikacja s≈Çu≈ºy wy≈ÇƒÖcznie celom edukacyjnym 
i badawczym. Nie zastƒôpuje profesjonalnej 
oceny medycznej lub psychologicznej.
"""
        messagebox.showinfo("O aplikacji", about_text)

    def setup_data_table(self):
        """Konfiguruje edytowalnƒÖ tabelƒô danych"""
        # Ramka z przyciskami
        button_frame = ttk.Frame(self.table_frame)
        button_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))

        ttk.Button(button_frame, text="üîÑ Od≈õwie≈º tabelƒô",
                   command=self.refresh_table).grid(row=0, column=0, padx=(0, 5))
        ttk.Button(button_frame, text="üíæ Zapisz zmiany",
                   command=self.save_table_changes).grid(row=0, column=1, padx=(0, 5))
        ttk.Button(button_frame, text="üì§ Eksportuj CSV",
                   command=self.export_table_csv).grid(row=0, column=2, padx=(0, 5))
        ttk.Button(button_frame, text="üìÑ Eksportuj analizƒô",
                   command=self.export_current_analysis).grid(row=0, column=3, padx=(0, 5))

        # Etykieta informacyjna
        self.table_info_label = ttk.Label(button_frame, text="Tabela nie jest wczytana")
        self.table_info_label.grid(row=0, column=4, padx=(20, 0))

        # Ramka dla tabeli z scrollbarami
        table_container = ttk.Frame(self.table_frame)
        table_container.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Tabela (Treeview)
        self.data_table = ttk.Treeview(table_container)

        # Scrollbary
        self.table_scrollbar_v = ttk.Scrollbar(table_container, orient="vertical",
                                               command=self.data_table.yview)
        self.table_scrollbar_h = ttk.Scrollbar(table_container, orient="horizontal",
                                               command=self.data_table.xview)

        # Konfiguracja scrollbar√≥w
        self.data_table.configure(yscrollcommand=self.table_scrollbar_v.set,
                                  xscrollcommand=self.table_scrollbar_h.set)

        # Umieszczenie element√≥w
        self.data_table.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.table_scrollbar_v.grid(row=0, column=1, sticky=(tk.N, tk.S))
        self.table_scrollbar_h.grid(row=1, column=0, sticky=(tk.W, tk.E))

        # Grid weights
        self.table_frame.columnconfigure(0, weight=1)
        self.table_frame.rowconfigure(1, weight=1)
        table_container.columnconfigure(0, weight=1)
        table_container.rowconfigure(0, weight=1)

        # Bind events dla edycji
        self.data_table.bind('<Double-1>', self.on_table_double_click)
        self.data_table.bind('<Return>', self.on_table_enter)

    def refresh_table(self):
        """Od≈õwie≈ºa tabelƒô z aktualnymi danymi"""
        if self.processed_df is None:
            messagebox.showwarning("Uwaga", "Najpierw wczytaj dane!")
            return

        # Wyczy≈õƒá tabelƒô
        for item in self.data_table.get_children():
            self.data_table.delete(item)

        # Konfiguruj kolumny - poka≈º WSZYSTKIE kolumny
        df_to_show = self.processed_df.copy()
        display_columns = list(df_to_show.columns)

        # USUNIƒòTE OGRANICZENIE: Poka≈º wszystkie kolumny zamiast tylko 20

        # Konfiguruj Treeview
        self.data_table['columns'] = display_columns
        self.data_table['show'] = 'tree headings'

        # Konfiguruj kolumny
        self.data_table.column('#0', width=50, minwidth=50, anchor='center')
        self.data_table.heading('#0', text='#', anchor='center')

        for col in display_columns:
            # Dostosuj szeroko≈õƒá kolumny do typu danych
            if col.endswith('_Category'):
                width = 120  # Szerzej dla kategorii tekstowych
            elif col in PERSONALITY_COLS:
                width = 80   # Wƒôziej dla liczb
            elif col in SUBSTANCE_COLS:
                width = 70   # Najwƒôziej dla substancji
            else:
                width = 100  # Domy≈õlna szeroko≈õƒá

            self.data_table.column(col, width=width, minwidth=60, anchor='center')
            self.data_table.heading(col, text=col, anchor='center')

        # Dodaj dane (pierwsze 1000 wierszy dla wydajno≈õci)
        max_rows = min(1000, len(df_to_show))
        for i in range(max_rows):
            row_data = []
            for col in display_columns:
                value = df_to_show.iloc[i][col]
                # Formatuj warto≈õci
                if pd.isna(value):
                    formatted_value = "NaN"
                elif isinstance(value, float):
                    if abs(value) < 0.001 and value != 0:
                        formatted_value = f"{value:.2e}"  # Notacja naukowa dla bardzo ma≈Çych liczb
                    else:
                        formatted_value = f"{value:.3f}"
                else:
                    formatted_value = str(value)
                row_data.append(formatted_value)

            self.data_table.insert('', 'end', text=str(i), values=row_data)

        # Aktualizuj etykietƒô
        total_rows = len(df_to_show)
        shown_rows = min(1000, total_rows)
        total_cols = len(display_columns)
        self.table_info_label.config(
            text=f"Wy≈õwietlono {shown_rows} z {total_rows} wierszy, {total_cols} kolumn (wszystkie dostƒôpne)"
        )

    def on_table_double_click(self, event):
        """Obs≈Çuguje podw√≥jne klikniƒôcie na kom√≥rkƒô"""
        item = self.data_table.selection()[0]
        column = self.data_table.identify_column(event.x)

        # Uzyskaj warto≈õƒá kolumny
        if column == '#0':
            return  # Nie edytuj numeru wiersza

        column_index = int(column[1:]) - 1  # Kolumny sƒÖ numerowane od #1
        if column_index >= len(self.data_table['columns']):
            return

        column_name = self.data_table['columns'][column_index]
        current_value = self.data_table.item(item, 'values')[column_index]

        # Otw√≥rz okno edycji
        self.open_edit_dialog(item, column_name, column_index, current_value)

    def on_table_enter(self, event):
        """Obs≈Çuguje naci≈õniƒôcie Enter na kom√≥rce"""
        if self.data_table.selection():
            self.on_table_double_click(event)

    def open_edit_dialog(self, item, column_name, column_index, current_value):
        """Otwiera dialog edycji kom√≥rki"""
        dialog = tk.Toplevel(self.root)
        dialog.title(f"Edytuj: {column_name}")
        dialog.geometry("300x150")
        dialog.transient(self.root)
        dialog.grab_set()

        # Etykieta
        ttk.Label(dialog, text=f"Kolumna: {column_name}").pack(pady=10)

        # Entry z aktualnƒÖ warto≈õciƒÖ
        value_var = tk.StringVar(value=str(current_value))
        entry = ttk.Entry(dialog, textvariable=value_var, width=30)
        entry.pack(pady=10)
        entry.focus()
        entry.select_range(0, tk.END)

        # Ramka przycisk√≥w
        button_frame = ttk.Frame(dialog)
        button_frame.pack(pady=10)

        def save_changes():
            new_value = value_var.get()
            self.update_table_cell(item, column_index, new_value, column_name)
            dialog.destroy()

        def cancel_changes():
            dialog.destroy()

        ttk.Button(button_frame, text="üíæ Zapisz",
                   command=save_changes).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="‚ùå Anuluj",
                   command=cancel_changes).pack(side=tk.LEFT, padx=5)

        # Bind Enter i Escape
        dialog.bind('<Return>', lambda e: save_changes())
        dialog.bind('<Escape>', lambda e: cancel_changes())

    def update_table_cell(self, item, column_index, new_value, column_name):
        """Aktualizuje kom√≥rkƒô w tabeli i DataFrame"""
        try:
            # Aktualizuj tabelƒô
            current_values = list(self.data_table.item(item, 'values'))
            current_values[column_index] = new_value
            self.data_table.item(item, values=current_values)

            # Aktualizuj DataFrame
            row_index = int(self.data_table.item(item, 'text'))

            # Konwersja warto≈õci do odpowiedniego typu
            if column_name in self.processed_df.columns:
                original_dtype = self.processed_df[column_name].dtype

                try:
                    if pd.api.types.is_numeric_dtype(original_dtype):
                        converted_value = pd.to_numeric(new_value)
                    else:
                        converted_value = str(new_value)

                    self.processed_df.at[row_index, column_name] = converted_value

                    messagebox.showinfo("Sukces",
                                        f"Zaktualizowano {column_name}[{row_index}] = {new_value}")
                except (ValueError, TypeError) as e:
                    messagebox.showerror("B≈ÇƒÖd",
                                         f"Nie mo≈ºna konwertowaƒá warto≈õci: {str(e)}")

        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna zaktualizowaƒá kom√≥rki: {str(e)}")

    def save_table_changes(self):
        """Zapisuje zmiany do pliku"""
        if self.processed_df is None:
            messagebox.showwarning("Uwaga", "Brak danych do zapisania!")
            return

        file_path = filedialog.asksaveasfilename(
            title="Zapisz dane",
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )

        if file_path:
            try:
                self.processed_df.to_csv(file_path, index=False)
                messagebox.showinfo("Sukces", f"Dane zapisane do: {file_path}")
            except Exception as e:
                messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna zapisaƒá pliku: {str(e)}")

    def export_table_csv(self):
        """Eksportuje aktualnie wy≈õwietlane dane z tabeli"""
        if self.data_table.get_children():
            file_path = filedialog.asksaveasfilename(
                title="Eksportuj widoczne dane",
                defaultextension=".csv",
                filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
            )

            if file_path:
                try:
                    # Zbierz dane z tabeli
                    columns = ['Row_Index'] + list(self.data_table['columns'])
                    data = []

                    for child in self.data_table.get_children():
                        row_data = [self.data_table.item(child, 'text')] + list(self.data_table.item(child, 'values'))
                        data.append(row_data)

                    # Utw√≥rz DataFrame i zapisz
                    export_df = pd.DataFrame(data, columns=columns)
                    export_df.to_csv(file_path, index=False)

                    messagebox.showinfo("Sukces", f"Eksport zako≈Ñczony: {file_path}")
                except Exception as e:
                    messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna eksportowaƒá: {str(e)}")
        else:
            messagebox.showwarning("Uwaga", "Tabela jest pusta!")

    def create_test_data(self):
        """Tworzy przyk≈Çadowe dane testowe"""
        try:
            import numpy as np

            # Generuj przyk≈Çadowe dane
            n_samples = 200
            np.random.seed(42)

            # ID
            data = {'ID': range(1, n_samples + 1)}

            # Demografia (znormalizowane warto≈õci)
            data['Age'] = np.random.choice(list(AGE_MAPPING.keys()), n_samples)
            data['Gender'] = np.random.choice(list(GENDER_MAPPING.keys()), n_samples)
            data['Education'] = np.random.choice(list(EDUCATION_MAPPING.keys()), n_samples)
            data['Country'] = np.random.choice(list(COUNTRY_MAPPING.keys()), n_samples)
            data['Ethnicity'] = np.random.choice(list(ETHNICITY_MAPPING.keys()), n_samples)

            # Cechy osobowo≈õci (znormalizowane, Œº‚âà0, œÉ‚âà1)
            for col in PERSONALITY_COLS:
                data[col] = np.random.normal(0, 1, n_samples)

            # Substancje (skala 0-6, wiƒôkszo≈õƒá ma niskie warto≈õci)
            for col in SUBSTANCE_COLS:
                # R√≥≈ºne prawdopodobie≈Ñstwa dla r√≥≈ºnych substancji
                if col in ['Caffeine', 'Alcohol', 'Chocolate', 'Nicotine']:
                    # Legalne - wy≈ºsze prawdopodobie≈Ñstwo
                    prob = 0.7
                elif col in ['Cannabis']:
                    prob = 0.3
                elif col in ['Cocaine', 'Ecstasy']:
                    prob = 0.1
                elif col in ['Heroin', 'Crack']:
                    prob = 0.02
                else:
                    prob = 0.15

                # Generuj warto≈õci 0-6 z odpowiednim prawdopodobie≈Ñstwem
                values = np.random.choice([0, 1, 2, 3, 4, 5, 6], n_samples,
                                          p=[1-prob, prob*0.3, prob*0.25, prob*0.2,
                                             prob*0.15, prob*0.07, prob*0.03])
                data[col] = values

            # Utw√≥rz DataFrame
            self.df = pd.DataFrame(data)
            self.processed_df = self.df.copy()

            # Przetw√≥rz dane
            success, message = self.data_processor._process_initial_data(self.df)
            if success:
                self.processed_df = self.df.copy()

                # Zaktualizuj UI
                self.data_info_label.config(
                    text=f"‚úÖ Utworzono {len(self.df)} przyk≈Çadowych rekord√≥w",
                    foreground="green"
                )

                # Poka≈º informacje
                self.display_data_info()

                # Zaktualizuj combobox-y
                self.update_substance_combos()

                # Od≈õwie≈º tabelƒô
                self.refresh_table()

                messagebox.showinfo("Sukces", "üß™ Utworzono przyk≈Çadowe dane testowe!")
            else:
                messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd przetwarzania danych testowych: {message}")

        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna utworzyƒá danych testowych: {str(e)}")

    # Dodatkowe metody aliasowe dla kompatybilno≈õci
    def perform_clustering(self):
        """Alias dla perform_enhanced_clustering"""
        return self.perform_enhanced_clustering()

    def show_cluster_analysis(self):
        """Alias dla analyze_cluster_substance_patterns"""
        return self.analyze_cluster_substance_patterns()

    def show_demographic_analysis(self):
        """Alias dla analyze_cluster_demographics"""
        return self.analyze_cluster_demographics()

    def show_risk_assessment(self):
        """Alias dla create_risk_assessment"""
        return self.create_risk_assessment()